
CCEffect %{
techniques: 
  - passes: 
      - vert: sprite-vs:vert
        frag: sprite-fs:frag
        depthStencilState: 
          depthTest: false
          depthWrite: false
        blendState: 
          targets: 
            - blend: true
              blendSrc: src_alpha
              blendDst: one_minus_src_alpha
              blendDstAlpha: one_minus_src_alpha
        rasterizerState: 
          cullMode: none
        properties: 
          alphaThreshold: 
            value: 0.5
          uCenter: 
            value: 
              - 0.5
              - 0.5
          uSize: 
            value: 
              - 300.0
              - 300.0
          uIntensity: 
            value: 0.3
}%
        
CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;
  out vec4 color;
  out vec2 uv0;
  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif
    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif
    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;
    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <cc-global>
  in vec4 color;
  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  uniform Constant {
		vec2 uCenter;
		vec2 uSize;
		float uIntensity;
	};
	uniform sampler2D uTex;

vec4 RadialBlur_main(sampler2D Tex, vec2 UV, vec2 Center, vec2 Size, float Intensity) 
{
    vec2 normalizedSize = vec2(1.0 / Size);
    vec4 sum = vec4(0.0);
    UV += normalizedSize * 0.5 - Center;
    for (float i = 0.0; i < 30.0; i++) {
        float offset = 1.0 - Intensity * (i / (30.0 - 1.0));
        sum += texture(Tex, UV * offset + Center);
    }
    return vec4(sum / (30.0 - 1.0));
}
  vec4 frag () {
     vec4 o = RadialBlur_main(cc_spriteTexture, uv0, uCenter, uSize, uIntensity);
       o *= color;
     ALPHA_TEST(o);
     return o;
   }
 }%
